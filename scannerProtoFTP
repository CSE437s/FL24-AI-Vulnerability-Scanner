import scapy.all as scapy
import nmap
import socket
import os
import subprocess
import re
import requests
import nvdlib
import json
import usb
from pyftpdlib.authorizers import DummyAuthorizer
from pyftpdlib.handlers import FTPHandler
from pyftpdlib.servers import FTPServer
import pyduinocli


from scapy.layers.l2 import ARP
import pprint


def os_scan_light(ip):
    #THis is only used by the arp process to get hostnames
    nm = nmap.PortScanner()
    results = nm.scan(ip, arguments='-O')
    if not results:
        name = "N/A"
    elif 'scan' not in results or ip not in results['scan'] or 'hostnames' not in results['scan'][ip] or not \
            results['scan'][ip]['hostnames']:
        name = "N/A"
    else:
        name = results['scan'][ip]['hostnames'][0]['name'] if results['scan'][ip]['hostnames'][0]['name'] else "N/A"

    result_tuple = (ip, name)
    return result_tuple
def arduino():
    arduino = pyduinocli.Arduino("./arduino-cli")
    print(arduino.version())
def ftp():
    authorizer = DummyAuthorizer()

    authorizer.add_user('user', '12345', '.', perm='elradfmwMT')
    authorizer.add_anonymous(os.getcwd())

    handler = FTPHandler
    handler.authorizer = authorizer
    handler.banner = "pyftpdlib based FTP server ready."
    address = ('0.0.0.0', 21)
    server = FTPServer(address, handler)

    server.max_cons = 256
    server.max_cons_per_ip = 5

    server.serve_forever()
def arp(inIP):
    retNames = []
    command = "arp -a -N " + inIP
    interfaces = input("all interfaces (y/n)?")
    if interfaces == "y":
        command = "arp -a"
    else:
        command = "arp -a -N " + inIP
    result = subprocess.check_output(command, shell=True, text=True)
    ip_pattern = r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
    IPs = re.findall(ip_pattern, result)
    print(IPs)
    names = input("Do you want Names (y/n)? ")
    if names == "y":
        for ip in IPs:
            scanRet = os_scan_light(ip)
            if scanRet[1] != 'N/A':
                retNames.append(scanRet)
                print(scanRet)
    else:
        print(result)
    return retNames

def nmapScan(ipRange):
    nm = nmap.PortScanner()
    nm.scan(hosts=ipRange, arguments="-sP")
    hosts = []
    for host in nm.all_hosts():
        if 'hostnames' in nm[host]:
            hostnames = nm[host]['hostnames']
            hostname = hostnames[0]['name'] if hostnames else 'Unknown'
        else:
            hostname = 'Unknown'

        hosts.append({'ip': host, 'hostname': hostname})
    print(hosts)
    return hosts
def testS():
    r = nvdlib.searchCVE(keywordSearch="HP Spectre x360", limit=10)
    print(r)

def getVulns(ip, spec):
    nm = nmap.PortScanner()
    results = nm.scan(ip, arguments='-O')
    print(results['scan'][ip]['osmatch'][0]['name'])
    foundOS = results['scan'][ip]['osmatch'][0]['name']
    if '-' in foundOS:
        foundOS = foundOS.split('-')[0]
    if '(' in foundOS:
        foundOS = foundOS.split('(')[0]

    r = nvdlib.searchCVE(keywordSearch=foundOS, limit=10)
    #print(r)
    c = 1
    for i in r:
        print("Vulnerability " + str(c) + " | " + i.descriptions[0].value)
        c += 1



def testMassVulns(ip):
    ips = arp(ip)
    if not ips:
        print("No Hosts Identified")
    else:
        for i in ips:
            print("IP: "+i[0]+" | HostName: "+i[1])
            getVulns(i[0], False)


def main():
    # Create a socket object
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # Connect to some address to get the local IP address associated with it
    s.connect(("8.8.8.8", 80))
    # Get the local IP address
    local_ip = s.getsockname()[0]
    # Close the socket

    # Close the socket
    s.close()
    print("Local IP: ", local_ip)
    test=None
    while (test != "quit"):
        test=input("Test? ")
        if test == "arpS":
            newIP=input("IP: ")
            scanRet = os_scan_light(newIP)
            print(scanRet)
            getVulns(newIP, True)
        if test =="arpM":
            testMassVulns(local_ip)
        if test =="usb":
            testS()
        if test=="nmap":
            rangeIP = input("IP Range: ")
            nmapScan(rangeIP)
        if test=="arduino":
            arduino()
        if test=="ftp":
            ftp()
        print("done")

main()
