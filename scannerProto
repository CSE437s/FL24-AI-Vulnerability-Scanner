import scapy.all as scapy
import nmap
import socket
import os
import subprocess
import re
import requests
import nvdlib


from scapy.layers.l2 import ARP
import pprint


def os_scan_light(ip):
    #THis is only used by the arp process to get hostnames
    nm = nmap.PortScanner()
    results = nm.scan(ip, arguments='-O')
    if not results:
        name = "N/A"
    elif 'scan' not in results or ip not in results['scan'] or 'hostnames' not in results['scan'][ip] or not \
            results['scan'][ip]['hostnames']:
        name = "N/A"
    else:
        name = results['scan'][ip]['hostnames'][0]['name'] if results['scan'][ip]['hostnames'][0]['name'] else "N/A"

    result_tuple = (ip, name)
    return result_tuple
def arp(inIP):
    retNames = []
    command = "arp -a -N " + inIP
    interfaces = input("all interfaces (y/n)?")
    if interfaces == "y":
        command = "arp -a"
    else:
        command = "arp -a -N " + inIP
    result = subprocess.check_output(command, shell=True, text=True)
    ip_pattern = r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
    IPs = re.findall(ip_pattern, result)
    print(IPs)
    names = input("Do you want Names (y/n)? ")
    if names == "y":
        for ip in IPs:
            scanRet = os_scan_light(ip)
            if scanRet[1] != 'N/A':
                retNames.append(scanRet)
                print(scanRet)
    else:
        print(result)
    return retNames

def getVulns(ip):
    nm = nmap.PortScanner()
    results = nm.scan(ip, arguments='-O')
    print(results['scan'][ip]['osmatch'][0]['name'])
    foundOS = results['scan'][ip]['osmatch'][0]['name']
    if '-' in foundOS:
        foundOS = foundOS.split('-')[0]
    if '(' in foundOS:
        foundOS = foundOS.split('(')[0]

    r = nvdlib.searchCVE(keywordSearch=foundOS, limit=10)
    #print(r)
    c = 1
    for i in r:
        print("Vulnerability " + str(c) + " | " + i.descriptions[0].value)
        c += 1

def testMassVulns(ip):
    ips = arp(ip)
    for i in ips:
        print("IP: "+i[0]+" | HostName: "+i[1])
        getVulns(i[0])


def main():
    # Create a socket object
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # Connect to some address to get the local IP address associated with it
    s.connect(("8.8.8.8", 80))
    # Get the local IP address
    local_ip = s.getsockname()[0]
    # Close the socket

    # Close the socket
    s.close()
    test=input("Specific? y/n: ")
    if test == "y":
        newIP=input("IP: ")
        getVulns(newIP)
    else:
        testMassVulns(local_ip)

    print("done")

main()
